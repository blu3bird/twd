# Introduction

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>

## Features

The TWD protocol and implementation can test for problems in the
following network features, bidirectionally, over the course of 
the test:

FIXME: BOWD? (Bandwidth and One Way Delay measurements?)
       Bidirectional One Way Delay measurements?
TOWD? (Timed and One Way Delay measurements?"

* Accurate one way delay measurements (in each direction)

* respect for and preservation of diffserv bits

* respect for and preservation ecn-related bits

* bandwidth determination

* fq detection

It can measure interpacket loss, jitter and delay, down to nanosecond 
intervals on all packets subject to the process's scheduling interval.

## Limitations

The tests use use interpacket sender timestamp differences. Being
sender clocked on isochronous intervals, it is straightforward to
calculate the actual departure time (and thus, one way delay) so long
as the sender can isochronously deliver packets across fairly short
(10ms) intervals.

## Specification of Requirements 

There is a need for a test that measures loss, jitter, one way delay and
packet markings as per how VOIP and Videoconferencing packet transfers
work, especially in the context in the context of bufferbloat
[BBLOAT]. Additionally, 

VOIP is characterised (typically) by isochronous single packet
transfers over UDP typically over a 10ms interval, transfered in both
directions.

Videoconferencing is generally more tied to the local frame rate,
which can drop as low as 5 per second in many cases. In all cases,
videoconferencing transfers a variable number of (fairly large)
packets based on the encoder's interpretation of the available
bandwidth.

Packet markings (diffserv and ECN) are not commonly used today in
voice and video transfers, partially due to the difficulty in setting
them and partially due to fear of the unknown.

# Conceptual Description of the Protocol

TWD packets are intended to look like VOIP packets which are generally
very short and very small. For example, the Opus encoder typically
generates an ipv4 packet size of about 110 packets. 

As the payload in TWD consists of bidirectional measurement data only,
a simpler protocol than RTP and RTSP was desired.

Packets in a measurement stream are sent on a short monotonic interval.
Each packet is timestamped (with the highest possible accuracy)
shortly before sending.

# Protocol Operation

## Message Transmission and Reception 

## Data Structures

## Acknowledged Packets

## NAT Punching

## Response embedded updates

# Protocol Encoding

A TWD packet is sent as the body of a UDP datagram, destined to a
well-known multicast address or to a unicast address, over IPv4 or
IPv6.  Both the source and destination UDP port are set to a user
specified port number.  After registration a TWD packet MUST be
silently ignored unless it matches a previously known nonce and
negotiated sequence number range.
 
TWD packets MUST NOT be sent as IPv6 Jumbograms.

## Data Types

### Absolute Timestamp

Times are carried as 64-bit values specifying a number of seconds
since the Epoch on the sender's local clock.  This should cover all
reasonable applications of twd.

### Timediff

A timediff is a 30 bit number in nanoseconds since the previous
timestamp in this packet.

The final two bits indicate ECN seen (ECT(3)), and Loss.

### Challenge

### Response

### Nonce

The nonce is a 64 bit integer derived from the challenge/response
pair, and used in all subsequent communications between a test client
and server.

The server SHOULD endevour that this be randomly generated, and that
all concurrently running tests use a unique nonce.

### Sequence Number (seqno)
The seqno is a 32 bit value starting at a negotiated point. It can wrap.

FIXME: we COULD use encrypted seqnos but I dislike the overhead.

FIXME: I wouldn't mind a 24 bit seqno

### Address

Multiple ways of encoding addresses are defined.  Additionally, a
common subnet prefix may be omitted when multiple addresses are sent
in a single packet -- this is known as address compression [PACKETBB].

Address encodings:

o  AE 0: wildcard address.  The value is 0 octets long.

o  AE 1: IPv4 address.  Compression is allowed. 4 octets or less.

o  AE 2: IPv6 address.  Compression is allowed. 16 octets or less.

o  AE 3: link-local IPv6 address.  The value is 8 octets long, a
      prefix of fe80::/64 is implied.

The address family of an address is either IPv4 or IPv6; it is
undefined for AE 0, IPv4 for AE 1, and IPv6 for AE 2 and 3.

FIXME: It doesn't look like address compression will help much,
and having separate TLVs for ipv4 and ipv6 will be shorter than
folding 4 into 6.

### Test Number

## Packet Format 

A TWD packet consists of a 4-octet header, followed by a sequence
of TLVs.

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|     Magic     |    Version      |      Body length            |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|   Packet Body ...
	+-+-+-+-+-+-+-+-+-+-+-+-+-
^[fig:packet_format::overall packet format]

Fields :

   Magic     The arbitrary but carefully chosen value 84 (decimal);
             packets with a first octet different from 84 MUST be
             silently ignored.

   Version   This document specifies version 0 of the TWD protocol.
             Packets with a second octet different from 0 MUST be
             silently ignored.

   Body length  The length in octets of the body following the packet
                header.

   Body      The packet body; a sequence of TLVs.

   Any data following the body MUST be silently ignored.

FIXME: magic could go and be replaced by nonce. Body length
in TCP or jumbogram case could be larger than 64k.

## TLV Format

With the exception of Pad1, all TLVs have the following structure:

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|     Type      |    Length       |     Body...
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

   Fields :

   Type      The type of the TLV.

   Length    The length of the body, exclusive of the Type and Length
             fields.  If the body is longer than the expected length of
             a given type of TLV, any extra data MUST be silently
             ignored.

   Body      The TLV body, the interpretation of which depends on the
             type.

   TLVs with an unknown type value MUST be silently ignored.

## Details of Specific TLVs

### Pad1

	 0
	 0 1 2 3 4 5 6 7
	+-+-+-+-+-+-+-+-+
	|   Type = 0    |
	+-+-+-+-+-+-+-+-+
^[fig:pad1_format::pad1 format]

   Fields :

   Type      Set to 0 to indicate a Pad1 TLV.

   This TLV is silently ignored on reception.

### PadN

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|    Type = 1   |    Length       |      MBZ...
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
^[fig:padN_format::padN format]

   Fields :

   Type      Set to 1 to indicate a PadN TLV.

   Length    The length of the body, exclusive of the Type and Length
             fields.

   MBZ       Set to 0 on transmission.

   This TLV is silently ignored on reception.

### RandN

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|    Type = 2   |    Length       |      MBZ...
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
^[fig:RandN_format::RandN format]

   Fields :

   Type      Set to 2 to indicate a RandN TLV.

   Length    The length of the body, exclusive of the Type and Length
             fields.

   MBZ       Set to random bytes on transmission.

   This TLV can be silently ignored on reception.

### Nonce

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 3    |     Length       |        Nonce                |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                 |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:nonce::Nonce format]

### ATime

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 4     |     Length      |       Absolute time         |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                                               |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                 |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

^[fig:timestamp_format::Timestamp format]
The Origin Time option specifies the time, encoded as a number of
seconds since 00:00:00, 1 January 1970 UTC, at which this message
is sending data relative to. It needn't be synced to ntp.

This option is unusual in that it has the same meaning whatever kind
of message it is sent in. FIXME: This is wrong. We need to differentiate
per-sent-packet timestamps from timestamp fields.

   Fields :

   Type set to 4 to indicate an Origin Time option.

### Register

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 5     |     Length      |       Challenge             |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                 |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:register_format::Register format]

### CounterProposal

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 6     |     Length      |       Response              |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                 |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:CounterProposal_format::CounterProposal format]

### Probe

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 7     |     Length      |       Challenge             |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                 |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:Probe_format::Probe format]

### ProbeAck

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 8     |     Length      |       Response              |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                 |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:ProbeAck_format::ProbeAck format]

### LSEEN (Last Seen)

The "Last Seen" stanza reports the most recently seen packets on
the other stream.

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 9     |     Length      |       testno                | 
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  seqno                                  			|
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  timediff	           			            | EL|
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  seqno                                                        |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  timediff...                                              | EL|
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:LastSeen_format::Last Seen packets format]

Fields:

   64 bit timestamp supplied earlier
   
   32 bit seqno (sequence number)
   
   30 bit difference of time since the timestamp in ns (2^30 > 1 second)

   1 bit E for ECT seen

   1 bit L for lost

FIXME: probably use the separate timestamp stanza

### CPU

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 10     |     Length     |            Response         |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                 |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

^[fig:CPU_format::CPU Report]

### LossRecord

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 11     |     Length     |        Response             |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  seqno                                  			            |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  timediff	           					                    | EL|
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  seqno                                  			            |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  timediff...       					                    | EL|
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:LossRecord_format::LossRecord format]

### TosRecord

	 0                   1                   2                   3 
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 12    |     Length      |       Response              |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  seqno                                  	  	                |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  TOS...       |                                               |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:TOSRecord_format::TOSRecord format]

### CloseWait

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 254   |     Length      |       Response              |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                 |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:CloseWait::CloseWait]

### Close

	 0                   1                   2                   3
	 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|  Type = 255   |     Length      |       Response              |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	|                                 |
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
^[fig:Close::Close]

# Implementation considerations

The implementation is dependent on the availability of pthreads, atomic
primitives, POSIX realtime and time calls, and the ability to set various
socket options from userspace.

Some Operating Systems may not be able to perform all tests. Notably,
TOS setting of ECN and Diffserv bits is not supported in Windows. Also,
several tests are dependent on features only available in Linux 3.10.12
or later.

## Implementation overview

## Example: VOIP-like test

You have one thread writing packets and the other receiving them, at a
fixed clock rate, say 10ms for the sake of this example. What we want
to measure are loss, jitter, and one way delay.

Unlike voip, we are sending several acknowledgements of each received
packet *and their timestamps* in the contents of every packet in each
direction. Every packet has some (up to the packet padding size)
duplication of each ack_t; so each side can cope with some packet loss
and still retain up to date information.

We have 4 threads, a (s)ender, (r)eceiver, (c)ollector and (m)onitor

s wakes up every 10ms. r wakes up on receiving a packet. c wakes up
every second to collect/process/deliver status. m watches for test
expiry, processor overload, and othe problems.

s gets a timestamp. (not actually very needed with timerfds)

s sends a new packet and checks to see if it has any acks from the
rthread.  (if so it can refine it's RTT estimate, get a grip on jitter
from the other side, etc.)

it sends a seqno and timestamp from that packet into r's ringbuf.  It
goes to sleep until the next interval

r wakes up on packet reception. It gets a timestamp. It processes the
packet, and looks at each acknowledge ack and peers into it's (r)
ringbuf to see if the most recently processed ack is >= the seqnum
still on it's ringbuf. if so it pulls off that ringbuffer entry, notes
the timestamp, compares the two, calculates the delay and jitter, and
so on. if not it considers it lost (or out of order) and it pulls off
packets until it gets to == seqnum and stops.

r sends along a copy to the collector, and goes back to get another packet.

Aside from the atomic operations and the timestamp (SO_TIMESTAMP seems
feasible), there are no syscalls, and almost no possibility (using
realtime scheduling) that these two threads will be interrupted, thus
inducing system jitter into the data.

the collector can run at a lower priority and be thoroughly interruptable.

The server thread can derive the RTT at any given point thusly:

  ringbuffer_peek(rbuf)/sizeof(ack_t)

The max size of the ringbuffer in this isochronous case is say, 2*the
nominal RTT * sizeof(ack_t)

The relationship between these two threads gets more interesting and
complex as we try to run faster (tcp in userspace anyone?) and
actually respond to loss/marking (speedtest), or do more rrul like
tests (where you might have 12 or more of r+s pairs)

## TOS field preservation tests

The TOS field is underused and underutilized primarily due to fear
that some intervening middlebox will maltreat the packets. Also, as
IPv6 changed the definition of IP_TOS to IPV6_TCLASS, applications
lackadasically ported to IPV6 typically do not call the correct socket
option for their IPv6 sockets.

Diffserv is not well deployed or respected either.

### TOS

With a system not under load, this test should suffice to determine if
Diffserv is preserved in either direction. It sends multiple bursts of
all 64, in various orders, and observes in what order they arrive at
the destination, as well as loss, jitter and delay. Pacing should be
observed to avoid overwhelming the network, along the lines of IW10.

With a system under congestive load, running this test simultaneously
should reveal if either direction is actively using classification to
schedule packets.

### Diffserv

With a system not under load, this test should suffice to determine if
Diffserv is preserved in either direction. It sends multiple bursts of
all known diffserv markings, in various orders, and observes in what
order they arrive at the destination, as well as loss, jitter and
delay. Pacing should be observed to avoid overwhelming the network,
along the lines of IW10.

With a system under congestive load, running this test simultaneously
should reveal if either direction is actively using classification to
schedule packets.

### ECN

With a system not under load, this test should suffice to determine if
ECN is preserved E2E. It sends multiple bursts of 4 packets (ECN bits
0 01 10 11), in various orders and observes in what order they arrive
at the destination. It is not a failure to drop ECT(1). It is not a
failure to see ECT(3) on a ECT(2) marked packet, but it is important
to ensure that ECT(3) is not always asserted on ECT(2) enabled
packets.

### Mixed Classification Test (CS)

With a system not under load, this test should suffice to determine if
802.11e is present in the local or remote system. It sends multiple
bursts of 8 packets (CS0 through CS7), in various orders over a single
tuple and observes in what order they arrive at the destination.

### Mixed Classification Test (AF)

With a system not under load, this test should suffice to determine
if the AF markings are respected in any way.

It sends multiple bursts of 12 packets (AF11 through AF41), in various
orders over a single tuple and observes in what order they arrive at
the destination.

### Mixed Mixed Classification Test (AF + CS)

AF and CS packets re-mixed together on a single tuple.

## Shaping Tests

### Bandwidth detection

### Tail drop and AQM detection

AQM technologies have patterns associated to them. Codel in particular
uses an invsqrt to schedule drops and ECN markings and this pattern is
easily observed in packet captures, thus it can be tested for. PIE and
RED are more complex, however it seems feasible to look at packet
mark/drop patterns in context with the traffic they are trying to
control (e.g. TCP).

### FQ detection

A diffserv test SHOULD be run simultaneously with a bandwidth test on
several different port numbers. This should give a picture of if
fair queueing and classification are in use. See [RRUL.]

A simpler test is to run one bandwidth test while running another
(say, voip test) on another set of ports.

### Framing detection

Certain underlying transport technologies have high and measurable
amounts of framing overhead (e.g. ATM). This test attempts to 
detect if that overhead exists, and if so, what the packet padding
size actually is.

### Aggregation detection

Certain underlying transport technologies have high and measurable
amounts of scheduling latency induced by aggregation. This test
attempts to detect if that overhead exists, and if so, what the
aggregate packet size actually is.



## Videoconferencing test

TBD

# Resources and Additional Information

http://www.bufferbloat.net

# Security Considerations

# IANA Considerations
This document has no actions for IANA.

# Acknowlegements

Netperf, Netanalyzer, ShaperProbe, Speedtest, uftp, iperf, freeswitch.

# Conclusions

